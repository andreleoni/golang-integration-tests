// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RequestInterface is an autogenerated mock type for the RequestInterface type
type RequestInterface struct {
	mock.Mock
}

type RequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestInterface) EXPECT() *RequestInterface_Expecter {
	return &RequestInterface_Expecter{mock: &_m.Mock}
}

// KeepAlive provides a mock function with given fields: url
func (_m *RequestInterface) KeepAlive(url string) bool {
	ret := _m.Called(url)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RequestInterface_KeepAlive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeepAlive'
type RequestInterface_KeepAlive_Call struct {
	*mock.Call
}

// KeepAlive is a helper method to define mock.On call
//   - url string
func (_e *RequestInterface_Expecter) KeepAlive(url interface{}) *RequestInterface_KeepAlive_Call {
	return &RequestInterface_KeepAlive_Call{Call: _e.mock.On("KeepAlive", url)}
}

func (_c *RequestInterface_KeepAlive_Call) Run(run func(url string)) *RequestInterface_KeepAlive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RequestInterface_KeepAlive_Call) Return(_a0 bool) *RequestInterface_KeepAlive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestInterface_KeepAlive_Call) RunAndReturn(run func(string) bool) *RequestInterface_KeepAlive_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestInterface creates a new instance of RequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestInterface {
	mock := &RequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
